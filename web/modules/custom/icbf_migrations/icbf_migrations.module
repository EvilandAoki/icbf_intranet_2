<?php

use Drupal\migrate\Row;
use Drupal\migrate\Plugin\MigrateSourceInterface;
use Drupal\migrate\Plugin\MigrationInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\field\Entity\FieldConfig;
use Drupal\views\ViewExecutable;


/**
 * Implementa hook_migrate_pre_row().
 */
function icbf_migrations_migrate_pre_row(Row $row, MigrateSourceInterface $source, MigrationInterface $migration) {
  $settings = $row->getSourceProperty('settings');
  if (is_null($settings)) {
    $row->setSourceProperty('settings', []);
    \Drupal::logger('icbf_migrations')->notice('Entro a icbf_migrations_migrate_pre_row.');
  }

  if ($migration->id() == 'upgrade_d7_field_instance') {
    \Drupal::logger('mymodule')->notice('Normalizando handler_settings[sort] a un array vacío.');
    $settings = $row->getSourceProperty('settings');
    if (!is_array($settings)) {
      $settings = [];
    }
    if (!isset($settings['handler_settings']) || !is_array($settings['handler_settings'])) {
      $settings['handler_settings'] = [];
    }

    if (!isset($settings['handler_settings']['sort']) || !is_array($settings['handler_settings']['sort'])) {
      $settings['handler_settings']['sort'] = [];
      \Drupal::logger('mymodule')->notice('Normalizando handler_settings[sort] a un array vacío.');
    }
    $row->setSourceProperty('settings', $settings);
  }
}

/**
 * Intercepta el preguardado para corregir la configuración del campo de imagen.
 */
function icbf_migrations_entity_presave(EntityInterface $entity) {
  // Verificamos que se trate de una configuración de campo.
  if ($entity instanceof FieldConfig && $entity->getType() === 'image') {
    $settings = $entity->getSettings();

    // Comprobamos si existe la clave 'default_image' y que no sea un array.
    if (isset($settings['default_image']) && !is_array($settings['default_image'])) {
      // Corrigimos el valor asignándole un array por defecto.
      $settings['default_image'] = [
        'uuid' => NULL,
        'fid' => NULL,
        // Se pueden agregar otros valores por defecto según sea necesario.
      ];
      $entity->set('settings', $settings);
      \Drupal::logger('icbf_migrations')->notice('Se corrigió la configuración del campo de imagen: se esperaba un array y se encontró un string.');
    }
  }
}


/**
* Implements hook_migrate_prepare_row().
*/
function icbf_migrations_migrate_prepare_row(Row $row, MigrateSourceInterface $source, MigrationInterface $migration) {
  $source = $row->getSource();
  $instances = $row->getSourceProperty('instances');
  if (isset($source['entity_type']) && $source['entity_type'] == 'comment') {
    $bundle = $row->getSourceProperty('bundle');
    $bundle = substr($bundle, 0, 32);
    $row->setSourceProperty('bundle', $bundle);
  }

  if (is_array($instances) && !empty($instances)) {
    $instance_changed = FALSE;
    foreach ($instances as $key => &$instance) {
      if ($instance['entity_type'] == 'comment') {
        $instance['bundle'] = substr($instance['bundle'], 0, 32);
        $instance_changed = TRUE;
      }
    }
    if ($instance_changed) {
      $row->setSourceProperty('instances', $instances);
    }
  }

  switch ($migration->id()) {
    case 'upgrade_d7_field':
    case 'upgrade_d7_field_instance':
    case 'upgrade_d7_field_instance_widget_settings':
      $type = $row->getSourceProperty('type');
      if ($type == 'text_long' || $type == 'text_with_summary') {
        $instances = $row->getSourceProperty('instances');
        foreach ($instances as $key => $instance) {
          if (isset($instance['data'])) {
            $data = unserialize($instance['data']);
            if (isset($data['settings']['text_processing'])) {
              // Set all text processing to filtered text.
              $data['settings']['text_processing'] = 1;

              if (!empty($data['display'])) {
                foreach ($data['display'] as &$display_value) {
                  if ($display_value['type'] == 'text_glazed_builder') {
                    $display_value['type'] = 'text_default';
                    $display_value['module'] = 'text';
                  }
                }
              }

              $instance['data'] = serialize($data);
              $instances[$key] = $instance;
              $row->setSourceProperty('instances', $instances);
            }
          }
        }
      }
      elseif ($type == 'sarnia') {
        return FALSE;
      }
      break;

    case 'upgrade_d7_comment_type':
      if (!$row->getSourceProperty('field_name')) {
        $row->setSourceProperty('field_name', 'comment_body');
      }
      break;

    case 'upgrade_d7_view_modes':
      $entity_type = $row->getSourceProperty('entity_type');
      if ($entity_type == 'sarnia_sarnia') {
        return FALSE;
      }
      elseif ($entity_type == 'bean') {
        $row->setSourceProperty('entity_type', 'block_content');
        $instances = $row->getSourceProperty('instances');
        foreach ($instances as $key => $instance) {
          $instance['entity_type'] = 'block_content';
          $instances[$key] = $instance;
          $row->setSourceProperty('instances', $instances);
        }
      }
      break;

    case 'upgrade_d7_filter_format':
      if ($row->hasSourceProperty('filters')) {
        $filters = $row->getSourceProperty('filters');

        foreach ($filters as &$filter) {
          if (isset($filter['module']) && $filter['module'] === 'ds_format') {
            $filter = [
              'format' => 'php',
              'module' => 'php',
              'name' => 'ds_code',
              'weight' => '0',
              'status' => '1',
              'settings' => [],
            ];
          }
        }
        $row->setSourceProperty('filters', $filters);
      }
      break;

    case 'upgrade_d7_node_complete_webform':
      // Assign default title to Webform nodes.
      if (!$row->hasSourceProperty('title') || empty($row->getSourceProperty('title'))) {
        $row->setSourceProperty('title', 'Webform sin título ' . $row->getSourceProperty('nid'));
      }
      break;

    case 'upgrade_d7_field_formatter_settings':
      $entity_type = $row->getSourceProperty('entity_type');
      $bundle = $row->getSourceProperty('bundle');
      $field_name = $row->getSourceProperty('field_name');
      $type = $row->getSourceProperty('type');
      if ($type == 'text_long' || $type == 'text_with_summary') {

        $instances = $row->getSourceProperty('instances');
        foreach ($instances as $key => $instance) {
          if (isset($instance['data'])) {
            $data = unserialize($instance['data']);
            if (isset($data['settings']['text_processing'])) {
              // Set all text processing to filtered text.
              $data['settings']['text_processing'] = 1;

              if (!empty($data['display'])) {
                foreach ($data['display'] as &$display_value) {
                  if ($display_value['type'] == 'text_glazed_builder') {
                    $display_value['type'] = 'text_default';
                    $display_value['module'] = 'text';
                  }
                }
              }
              $instance['data'] = serialize($data);
              $instances[$key] = $instance;
              $row->setSourceProperty('instances', $instances);

            }
          }
        }
      }
      break;

    case 'upgrade_d7_bean_block':
      if (!$row->getSourceProperty('title')) {
        $label = $row->getSourceProperty('label');
        $row->setSourceProperty('title', $label);
      }
      // dump($source);

      break;
    case 'd7_menu_links':
      if ($source['plid'] == 1741 || $source['plid'] == 50) {
        $row->setSourceProperty('plid', 0);
      }

      if ($row->hasSourceProperty('link_path')) {
        $link_path = $row->getSourceProperty('link_path');

        if (strpos($link_path, 'node/') === 0) {
          $link_path = str_replace('node/', 'internal:/node/', $link_path);
        }
        elseif (strpos($link_path, 'taxonomy/term/') === 0) {
          $link_path = str_replace('taxonomy/term/', 'entity:taxonomy_term/', $link_path);
        }
        elseif (strpos($link_path, 'admin/') === 0) {
          $link_path = str_replace('admin/', 'internal:/admin/', $link_path);
        }
        elseif (strpos($link_path, 'citaciones/') === 0) {
          $link_path = str_replace('citaciones/', 'internal:/citaciones/', $link_path);
        }

        $row->setSourceProperty('link_path', $link_path);
      }
      elseif ($row->hasSourceProperty('parent_link_path')) {
        $link_path = $row->getSourceProperty('parent_link_path');

        if (strpos($link_path, 'admin/') === 0) {
          $link_path = str_replace('admin/', 'internal:/admin/', $link_path);
        }
        $row->setSourceProperty('parent_link_path', $link_path);
      }
      break;
    case 'search_api_server':
      $plugin_id = $row->getSourceProperty('plugin_id') ?: 'search_api_db';
      $row->setSourceProperty('plugin_id', $plugin_id);

      $options = $row->getSourceProperty('options');
      if (is_string($options)) {
        $un = @unserialize($options);
        $row->setSourceProperty('backend_config', is_array($un) ? $un : []);
      }
      elseif (is_array($options)) {
        $row->setSourceProperty('backend_config', $options);
      }
      else {
        $row->setSourceProperty('backend_config', []);
      }
      break;
    case 'search_api_index':
      foreach (['options', 'datasource_configuration', 'tracker_configuration'] as $prop) {
        $value = $row->getSourceProperty($prop);
        if (is_string($value)) {
          $un = @unserialize($value);
          $row->setSourceProperty($prop, is_array($un) ? $un : []);
        }
        elseif (!is_array($value)) {
          $row->setSourceProperty($prop, []);
        }
      }
      return TRUE;
        break;
    case 'upgrade_d7_views_migration':
      $views_id = [
        'usuarios',
        'editorial_last_content',
        'calendario_rendici_n',
        'taxonomy_term',
        'tranpsarencia_listado_temas',
        'glosario_icbf',
        'contexto_micrositios',
        'ada_home_grid',
        'micrositios_contextos',
        'documentos_contratacion',
        'ubicaciones_20',
        'tracker',
        'botones_home',
        'ni_os_migrantes_venezolanos',
        'me_conoces_ni_os_venezolanos',
        'proveedores',
        'media_browser_plus',
        'media_default',
        'informes_regionales_rendici_n_de_cuestas_',
        'sitemap',
        'notificaciones_pc_coactivos',
        'admin_views_node',
        'transparencia_home',
        'actas_contentivas_',
        'estudios_de_sector_v1',
        // 'calendar',
      ];
      if (in_array($source['name'], $views_id)) {
        // dump($source['name']);
        // dump($source);
      }
      else {
        return FALSE;
      }
      break;
  }
}

/**
 * Implements hook_migrate_process_alter().
 *
 * Se ejecuta después de aplicar los plugins de proceso.
 */
function icbf_migrations_migrate_process_alter(Row $row, MigrateSourceInterface $source, MigrationInterface $migration) {
  if ($migration->id() === 'd7_field_instance') {
    $settings = $row->getSourceProperty('settings');
    if (is_array($settings)) {
      if (isset($settings['handler_settings']) && is_array($settings['handler_settings'])) {
        if (!isset($settings['handler_settings']['sort']) || !is_array($settings['handler_settings']['sort'])) {
          $settings['handler_settings']['sort'] = [];
          $row->setSourceProperty('settings', $settings);
          \Drupal::logger('mimodulo')->notice('hook_migrate_process_alter: forzado settings.handler_settings.sort a array.');
        }
      }
    }
  }
}

/**
 * Implementa hook_views_migration_alter().
 *
 * Permite modificar la definición de migración de vistas.
 */
function icbf_migrations_views_migration_alter(array &$migration) {
  if (isset($migration['id']) && strpos($migration['id'], 'd7_view') !== FALSE) {
    if (!empty($migration['process']['display:default']['filters'])) {
      foreach ($migration['process']['display:default']['filters'] as $key => $filter) {
        if (strpos($key, 'tid') !== FALSE) {
          unset($migration['process']['display:default']['filters'][$key]);
          \Drupal::logger('icbf_migrations')->notice('Filtro de taxonomía eliminado de la migración: ' . $key);
        }
      }
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function icbf_migrations_form_layout_builder_update_block_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  if (strpos($form_id, 'layout_builder_') !== FALSE) {
    if (isset($form['settings']['provider']['#type']) && $form['settings']['provider']['#value'] === 'views') {
      $build_info = $form_state->getBuildInfo();

      if (!empty($build_info['args'][0])) {
        /** @var \Drupal\layout_builder\SectionComponent $component */
        $section_storage = $build_info['args'][0];

        $arguments = $form['settings']['views_label']['#description']->getArguments();
        $url  = explode('/', $arguments[':url']);
        $view_id = $url[5];
        $display_id = $url[7];

        foreach ($section_storage->getSections() as $section) {
          foreach ($section->getComponents() as $component) {
            $component_id = $component->getPluginId();
            if ($component_id === "views_block:{$view_id}-{$display_id}") {
              $form['settings']['override']['items_per_page']['#title'] = t('Contextual filters');
              // $default_value = $component ? $component->get('configuration')['contextual_filters'] ?? '' : '';
              // $form['settings']['contextual_filters'] = [
              //   '#type' => 'textfield',
              //   '#title' => t('Contextual filters'),
              //   '#default_value' => $default_value,
              //   '#description' => t('Contextual filters to pass to the view.'),
              // ];
              // $form['settings']['component_id'] = [
              //   '#type' => 'hidden',
              //   '#value' => $component_id,
              // ];
            }
          }
        }
      }
    }
  }
}

/**
 * Implementa hook_views_pre_view().
 */
function icbf_migrations_views_pre_view(ViewExecutable $view, $display_id, array &$args) {
  if (empty($args[0])) {
    $args = [];
    $view_id = $view->id();

    $term = \Drupal::routeMatch()->getParameter('taxonomy_term');
    if ($term instanceof \Drupal\taxonomy\Entity\Term ) {
      $term_id = $term->id();
      $layout_configs = \Drupal::database()->select('taxonomy_term__layout_builder__layout', 'tl')
        ->fields('tl', ['layout_builder__layout_section'])
        ->condition('entity_id', $term_id)
        ->execute()->fetchAll();

      if (empty($layout_configs)) {
        $vocabulary = $term->bundle();
        $config_display = \Drupal::database()->select('config', 'c')
          ->fields('c', ['data'])
          ->condition('name', "core.entity_view_display.taxonomy_term.{$vocabulary}.default")
          ->execute()->fetchAll();

        foreach ($config_display as $config_value) {
          $layout_config = $config_value->data;
          $layout_config = unserialize($layout_config);
          if (isset($layout_config['third_party_settings']['layout_builder']['sections'])) {
            $sections = $layout_config['third_party_settings']['layout_builder']['sections'];
            foreach ($sections as $section) {
              if (isset($section['components'])) {
                foreach ($section['components'] as $component) {
                  if ($component['configuration']['id'] == "views_block:{$view_id}-{$display_id}") {
                    if (!empty($component['configuration']['items_per_page'])) {
                      $args[] = $component['configuration']['items_per_page'];
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}
