<?php

use Drupal\Core\Pager\PagerManagerInterface;
use Drupal\Core\Pager\PagerParameters;
use Drupal\views\Views;
use Drupal\taxonomy\Entity\Term;
use Drupal\block_content\Entity\BlockContent;

/**
 * @file
 * icbf theme file.
 */

 /**
 * Implements hook_preprocess_page().
 */
function icbf_preprocess_page(array &$variables) {
  // Fixed vs fluid.
  $fluid = \Drupal::config('icbf.settings')->get('fluid_breakpoint');
  $variables['container_class'] = $fluid ? 'container-fluid' : 'container';

  // Columna de contenido según sidebars.
  $has_first  = !empty($variables['page']['sidebar_first']);
  $has_second = !empty($variables['page']['sidebar_second']);

  if ($has_first && $has_second) {
    $variables['content_column_class'] = 'col-lg-6';
  }
  elseif ($has_first || $has_second) {
    $variables['content_column_class'] = 'col-lg-9';
  }
  else {
    $variables['content_column_class'] = 'col-lg-12';
  }
}

/**
 * Implements hook_theme_registry_alter().
 */
function icbf_theme_registry_alter(array &$theme_registry) {
  $theme_path = \Drupal::service('extension.list.theme')->getPath('icbf');

  foreach ($theme_registry as $key => &$info) {
    if (str_starts_with($key, 'page__node__')) {
      // Redirige estos templates a la carpeta 'layout'
      $template_file = $theme_path . '/layout/' . str_replace('__', '--', $key) . '.html.twig';
      if (file_exists($template_file)) {
        $info['path'] = $theme_path . '/layout';
      }
    }
  }
}



/**
 * Implementa hook_theme_suggestions_page_alter().
 */
function icbf_theme_suggestions_page_alter(array &$suggestions, array $variables) {
  $route_match = \Drupal::routeMatch();

  if ($node = $route_match->getParameter('node')) {
    if ($node instanceof NodeInterface) {
      $bundle = $node->bundle();
      \Drupal::logger('theme_suggestions')->debug('Bundle: ' . $bundle);
      $suggestions[] = 'page__node__' . $bundle;
    }
  }
}



/**
 * Implements hook_preprocess_HOOK() para webform-submission-list.html.twig.
 */
function mi_tema_preprocess_webform_submission_list(array &$variables) {
  if ($variables['element']['#webform_id'] !== 'webform_53894') {
    return;
  }

  $all_items = $variables['items'];
  $total = count($all_items);
  $per_page = 10;

  // Creamos el pager con el total y el per-page.
  /** @var PagerManagerInterface $pager_manager */
  $pager_manager = \Drupal::service('pager.manager');
  $pager_manager->createPager($total, $per_page);

  $current_page = \Drupal::service('pager.parameters')->findPage();
  $offset = $current_page * $per_page;

  $variables['items'] = array_slice($all_items, $offset, $per_page);

  // Añadimos la render array del pager para Twig.
  $variables['pager'] = [
    '#type' => 'pager',
  ];
}

/**
 * Implements hook_preprocess_HOOK().
 */
function icbf_preprocess_field(&$variables) {
  $field_to_check = [
    'field_content',
    'field_video_02',
    'field_builder',
    'field_constructor_glazedb',
    'field_infografia_dit',
    'field_header_area'
  ];
  if (in_array($variables['field_name'], $field_to_check)) {
    $items = &$variables['items'];
    foreach ($items as &$item) {
      if (is_null($item['content']['#format'])) {
        $item['content']['#format'] = 'full_html';
      }
    }
  }
  if ($variables['field_name'] == 'field_constructor_glazedb' && isset($item['content']['#text'])) {
    $html = $item['content']['#text'];
    $item['content']['#text'] = icbf_files_directory_process($html);
  }
  if ($variables['field_name'] == 'field_infografia_dit' && isset($item['content']['#text'])) {
    $html = $item['content']['#text'];
    $item['content']['#text'] = icbf_files_directory_process($html);
  }
  if ($variables['field_name'] == 'field_content' && isset($item['content']['#text'])) {
    $html = $item['content']['#text'];
    $item['content']['#text'] = icbf_files_directory_process($html);
  }
  if ($variables['field_name'] == 'field_header_area' && isset($item['content']['#text'])) {
    $html = $item['content']['#text'];
    $item['content']['#text'] = icbf_files_directory_process($html);
  }
  if ($variables['field_name'] == 'field_builder' && isset($item['content']['#text'])) {
    $html = $item['content']['#text'];
    $item['content']['#text'] = icbf_files_directory_process($html);
  }

  $items = &$variables['items'];
  foreach ($items as &$item) {
    if (isset($item['content']['#text'])) {
      $html = $item['content']['#text'];
      // For views in Glazed Builder.
      if (strpos($html, 'data-azb="az_view')) {
        $explode_html = explode('</div>', $html);
        foreach ($explode_html as $original_element) {
          if (strpos($original_element, 'data-azb="az_view')) {
            $original_element .= '</div>';
            $element = trim($original_element);

            // Check if there are contextual filters.
            $filter = [];
            $pos_contextual_filter = strpos($element, 'data-azat-contextual_filter');
            if ($pos_contextual_filter) {
              $string = substr($element, $pos_contextual_filter);
              $string_array = explode('"', $string);
              $filter = isset($string_array[1]) ? explode('/', $string_array[1]) : [];
            }

            // Check if view data.
            $view_data = [];
            $pos_view_info = strpos($element, 'data-azb="az_view');
            $string = substr($element, $pos_view_info);
            $string_array = explode('"', $string);
            $view_data = isset($string_array[1]) ? explode('-', $string_array[1]) : [];
            if (isset($view_data[1]) && isset($view_data[2])) {
              $view = Views::getView($view_data[1]);
              if ($view) {
                $view->setDisplay($view_data[2]);

                if (!empty($filter)) {
                  $view->setArguments($filter);
                }
                $view->preExecute();
                $view->execute();

                // Render it
                $render_array = $view->render();
                $html_view = \Drupal::service('renderer')->render($render_array);
                $html = str_replace($original_element, $html_view, $html);
              }
            }
          }
        }

        $item['content']['#text'] = $html;
      }

      // For blocks in Glazed Builder.
      if (strpos($html, 'data-azb="az_block')) {
        $explode_html = explode('</div>', $html);
        foreach ($explode_html as $original_element) {
          if (strpos($original_element, 'data-azb="az_block')) {
            $original_element .= '</div>';
            $element = trim($original_element);

            // Check if view data.
            $block_data = [];
            $pos_block_info = strpos($element, 'data-azb="az_block');
            $block_class = '';
            if (strpos($element, 'class=') !== FALSE) {
              $elem_array = explode('"', $element);
              if (strpos($elem_array[0], 'class=') !== FALSE) {
                $block_class = $elem_array[1];
              }
            }

            $string = substr($element, $pos_block_info);
            $string_array = explode('"', $string);
            foreach ($string_array as $elem_value) {
              if (strpos($elem_value, 'az_block') !== FALSE) {
                $block_id = str_replace('az_block-bean', '', $elem_value);
                $block_id = str_replace('---', '|+|', $block_id);
                $block_id = str_replace('-', ' ', $block_id);
                $block_info = trim(str_replace('|+|', ' - ', $block_id));
                $blocks = \Drupal::entityTypeManager()
                  ->getStorage('block_content')
                  ->loadByProperties(['info' => $block_info]);
                $block = reset($blocks);

                if ($block) {
                  $view_builder = \Drupal::entityTypeManager()->getViewBuilder('block_content');
                  $render_array = $view_builder->view($block);
                  if (!isset($render_array['field_builder']['#attributes'])) {
                    $render_array['field_builder']['#attributes'] = [];
                  }
                  if (!isset($render_array['field_builder']['#attributes']['class'])) {
                    $render_array['field_builder']['#attributes']['class'] = [];
                  }

                  $render_array['field_builder']['#attributes']['class'][] = $block_class;
                  $html_block = \Drupal::service('renderer')->renderRoot($render_array);
                  $html = str_replace($original_element, $html_block, $html);
                }
              }
            }
          }
        }

        $item['content']['#text'] = $html;
      }

      if (strpos($html, 'data-azat-icon="pe')) {
        $explode_html = explode('</div>', $html);
        foreach ($explode_html as $original_element) {
          if (strpos($original_element, 'data-azat-icon="pe')) {
            $original_element .= '</div>';
            $element = trim($original_element);

            // Check if view data.
            $block_data = [];
            $pos_block_info = strpos($element, 'data-azat-icon="pe');
            $string = substr($element, $pos_block_info);
            $string_array = explode('"', $string);
            $icon_class = [];
            $icon_style = '';
            foreach ($string_array as $elem_value) {
              if (strpos($elem_value, 'pe pe-') !== FALSE || strpos($elem_value, 'fa') !== FALSE) {
                $icon_class[] = $elem_value;
              }
              elseif (strpos($elem_value, 'color:') !== FALSE) {
                $icon_style = $elem_value;
              }
            }

            if (!empty($icon_class)) {
              $icon_class = implode(' ', $icon_class);
              $icon_html = '<i class="' . $icon_class . '"';
              if (!empty($icon_style)) {
                $icon_html .= ' style="' . $icon_style . '"';
              }
              $icon_html .= '></i>';
              $element = str_replace('&nbsp;', $icon_html, $original_element);
              $html = str_replace($original_element, $element, $html);
            }
          }
        }

        $item['content']['#text'] = $html;
      }

      if (strpos($html, 'data-azat-icon="et')) {
        $explode_html = explode('</div>', $html);
        foreach ($explode_html as $original_element) {
          if (strpos($original_element, 'data-azat-icon="et')) {
            $original_element .= '</div>';
            $element = trim($original_element);

            // Check if view data.
            $block_data = [];
            $pos_block_info = strpos($element, 'data-azat-icon="et');
            $string = substr($element, $pos_block_info);
            $string_array = explode('"', $string);
            $icon_class = [];
            $icon_style = '';
            foreach ($string_array as $elem_value) {
              if (strpos($elem_value, 'et et-') !== FALSE || strpos($elem_value, 'fa') !== FALSE) {
                $icon_class[] = $elem_value;
              }
              elseif (strpos($elem_value, 'color:') !== FALSE) {
                $icon_style = $elem_value;
              }
            }

            if (!empty($icon_class)) {
              $icon_class = implode(' ', $icon_class);
              $icon_html = '<i class="' . $icon_class . '"';
              if (!empty($icon_style)) {
                $icon_html .= ' style="' . $icon_style . '"';
              }
              $icon_html .= '></i>';
              $element = str_replace('&nbsp;', $icon_html, $original_element);
              $html = str_replace($original_element, $element, $html);
            }
          }
        }

        $item['content']['#text'] = $html;
      }
    }
  }
}

function icbf_preprocess_node(array &$variables) {
  if (\Drupal::currentUser()->isAnonymous()) {
    $variables['display_submitted'] = FALSE;
  }
}

/**
 * Processes the HTML content to replace placeholders with actual values.
 *
 * @param string $html
 *   The HTML content to process.
 *
 * @return string
 *   The processed HTML content with placeholders replaced.
 */
function icbf_files_directory_process($html)
{
  if (strpos($html, '-base-url-') === FALSE && strpos($html, '-files-directory-') === FALSE) {
    return $html;
  }

  $request = \Drupal::service('request_stack')->getCurrentRequest();
  $base_url = $request->getSchemeAndHttpHost();
  $public_files_path = \Drupal::config('system.file')->get('path.public') ?? 'sites/default/files';
  $html = str_replace('-base-url-', $base_url, $html);
  $html = str_replace('-files-directory-', $public_files_path, $html);
  return $html;
}

/**
 * Implements hook_preprocess_views_view_field().
 */
function icbf_preprocess_views_view_field(array &$variables) {
  /** @var \Drupal\views\ViewExecutable $view */
  $view = $variables['view'];

  if (
    $view->id() === 'catalogo_dit_taxonomias' &&
    $view->current_display === 'block_1' &&
    $variables['field']->field === 'nothing'
  ) {
    /** @var \Drupal\taxonomy\TermInterface $term */
    $term = $variables['row']->_entity;
    $tid = $term->id();

    // Consulta los nodos relacionados.
    $nids = \Drupal::entityQuery('node')
      ->accessCheck(FALSE)
      ->condition('field_categoria_dit.target_id', $tid) // asegúrate del nombre real del campo
      ->condition('status', 1)
      ->execute();
    $nodes = \Drupal\node\Entity\Node::loadMultiple($nids);

    // Prepara las opciones: key = URL, value = Título.
    $options = ['' => t('Selecciona un servicio')];
    foreach ($nodes as $node) {
      $url = $node->toUrl()->toString();
      $options[$url] = $node->getTitle();
    }

    // Render array con atributo onchange para redirección.
    $render = [
      '#type' => 'select',
      '#options' => $options,
      '#attributes' => [
        'class' => ['dit-selector'],
        'onchange' => 'if (this.value) { window.location.href = this.value; }',
      ],
    ];

    // Vuelca el HTML en el campo.
    $variables['output'] = \Drupal::service('renderer')->renderPlain($render);
  }
}




